/*
엉터리 한글 통화 해석

문제

당신은 상식은행의 입출금 처리 프로그램을 만들고 있다.
상식은행의 입출금 요청 입력 양식에는 금액을 입력하는 난이 있다.
이 난은 한국식 통화 표기법으로 입력하도록 되어 있다.
한국식 통화 표기법은 한국인이 흔히 사용하는 구두식 표현으로, 다음과 같은 방식이다.

1) "일", "이", "삼", "사", "오", "육", "칠", "팔", "구"로 1, 2, 3, 4, 5, 6, 7, 8, 9를 표현한다.
2) "십", "백", "천"으로 각각 10, 100, 1000의 자리를 표현한다.
3) "만", "억", "조", "경"으로 각각 10000, 100000000, 1000000000000, 10000000000000000의 자리를 표현한다.
4) 위의 1), 2), 3)의 조합을 통해 각종 수를 표기한다.
5) 값이 0인 자리수의 표현은 생략된다.
6) 한국인들의 습관에 따라, 값이 1인 "십", "백", "천", "만" 자리수의 "일" 표현은 생략되어 단순히 "십", "백", "천", "만" 등으로 표기하기도 한다. "억", "조", "경" 등은 이에 해당되지 않는다.
7) 0은 "영"으로 표기한다.
8) 한국인들의 습관에 따라, "n억m천"은 (n*억 + m*천)이 아니라, (n*억 + m천만)으로 해석해야 한다. 따라서 (n*억 + m*천)값은 표현되지 않는다.
입출금 처리를 지원하기 위해서는 입출금 요청 양식에 입력된 한글 통화 표기를 수로 변환하여야 한다. 한글 통화 표기법에 따라 작성된 문자열을 입력받아 수로 변환하는 프로그램을 작성하시오. 단, 이 프로그램은 수로 변환할 수 없는 문자열이 입력될 경우 false를 출력해야 한다.

입출력 예

"영" -> 0
"일" -> 1
"칠" -> 7
"이천오" 2005
"구천" -> 9000
"일십만" -> 100000
"십만" -> 100000
"일억오천" -> 150000000
"일억오천만" -> 150000000
"억오천만" -> false

"사천구십칠조이천만삼백십육" -> 4097000020000316
*/

var digit = "영일이삼사오육칠팔구";

var group = {
    "십" : 10,
    "백" : 100,
    "천" : 1000,
    "만" : 10000,
    "억" : 100000000,
    "조" : 1000000000000,
    "경" : 10000000000000000
};

var reg = new RegExp(`(?:([${digit}])?(천))?(?:([${digit}])?(백))?(?:([${digit}])?(십))?([${digit}])?([만억조경]?)`, "g");

var test = function (str) {
    return str.replace(reg, function(str, $1, $2, $3, $4, $5, $6, $7) {
        console.log(0, str);
        console.log(1, $1);
        console.log(2, $2);
        console.log(3, $3);
        console.log(4, $4);
        console.log(5, $5);
        console.log(6, $6);
        console.log(7, $7);
    });
};

var interprete = function (korean) {
    var result = 0;
    var one = 0;
    var thousand = 0;
    for (k of korean) {
        var d = digit.indexOf(k);
        if (digit[k] > -1) {
            one += d;
        }

        var s = digit.indexOf(k);
        if (digit[k] > -1) {
            if (one < 0) one = 1;
            thousand += one * s;
            one = 0;
        }
    }
    result += thousand + one;
    console.log(result);
};
